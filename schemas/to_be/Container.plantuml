@startuml
title CinemaAbyss Container diagram

top to bottom direction

!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Deployment.puml


Person(User, "Пользователь", "Пользователь онлайн сервиса")
System_Ext(RecommendationSystem, "Внешняя рекомендательная система", "Рекомендации, подборки")

System(CinemaAbyss, "Кинобездна", "Стриминговый сервис")

Container_Boundary(CinemaAbyss, "Kubernetes Cluster (prod)"){
    Deployment_Node(k8s, "Kubernetes Cluster") {
        Container(ProxyService, "Proxy API Gateway", "Kong, NGINX",  "Аутентификация, роутинг, канареечные релизы")

        Container(WebPlatform, "Веб платформа", "Javascript", "Вебсайт платформы" )
        Container(MobilePlatform, "Мобильное приложение", "Java", "Телефон, планшет")
        Container(StreamingPlatform, "Стриминг платформа", "Nodejs", "Smart TV, Smart TV-приставка")

        Container(BFFWeb, "BFF - Web", "Nodejs", "Агрегация данных для веб-клиента")
        Container(BFFMobile, "BFF - Mobile", "Nodejs, Java", "Агрегация данных мобильных клиентов")
        Container(BFFStreaming, "BFF - Streaming", "Nodejs, Java", "Агрегация данных для стриминга")

        Container(AuthService, "Сервис Авторизации", "Java", "Аутентификация, идентификация, токены")
        Container(UserService, "Сервис Пользователей", "Java", "Профили пользователей")
        Container(MoviesService, "Сервис метаданные фильмов", "Go", "Метаданные: актеры, жанры")
        Container(ContentService, "Контент сервис", "Go", "Хранилище фильмов, ролики и т.д.")
        Container(SubscriptionService, "Сервис Подписок", "Go", "Подписки, скидки")
        Container(PaymentService, "Сервис обработки платежей", "Java", "платежи, чеки")

        Container(EventService, "Сервис Событий",  "Публикация, подписка событий через Kafka")

        Container(MonolithSystem, "Монолит", "Легаси код, в эксплутации")

        Container(Observability, "Мониторинг", "Prometheus + Grafana", "Метрики, логи, трассировки")
        Container(ConfigSecretService, "Конфигурации и секреты",  "Управление конфигурациями и секретами")
        Container(CICD, "Непрерывная интеграция и доставка", "GitHub / Gitlab, Jenkins", "Автоматические: сборка, тесты, развертывание (канареечное)")
    }

    SystemDb(MonolithDB, "БД монолита", "Единая база данных (старая)")
    SystemDb(MoviesDB, "БД сервиса метаданные фильмов", "Postgres")
    SystemDb(SubscriptionsDB, "БД сервиса подписки", "Postgres")
    SystemDb(ContentDB, "БД сервиса Контент", "Postgres")
    SystemDb(PaymentDB, "БД сервиса Платежная система", "Postgres")
    SystemDb(UsersDB, "БД сервиса Пользователей", "Postgres")
}

Rel(User, WebPlatform, "API REST/Websocket")
Rel(User, MobilePlatform, "API REST/Websocket")
Rel(User, StreamingPlatform, "API REST/Websocket")

Rel(WebPlatform, ProxyService, "API REST/Async")
Rel(MobilePlatform, ProxyService, "API REST/Async")
Rel(StreamingPlatform, ProxyService, "API REST/Async")

Rel(ProxyService, AuthService, "Валидация токенов")

Rel(ProxyService, BFFWeb, "API REST/Async")
Rel(ProxyService, BFFMobile, "API REST/Async")
Rel(ProxyService, BFFStreaming, "API REST/Async")

Rel(BFFWeb, EventService, "Публикация, подписка событий")
Rel(BFFMobile, EventService, "Публикация, подписка событий")
Rel(BFFStreaming, EventService, "Публикация, подписка событий")

Rel(ProxyService, MonolithSystem, "Постепенное сокращение трафика")
Rel(MonolithSystem, MonolithDB, "Хранение")

Rel(ProxyService, MoviesService, "Обмен событиями")
Rel(MoviesService, MoviesDB, "Хранение")

Rel(ProxyService, SubscriptionService, "Обмен событиями")
Rel(SubscriptionService, SubscriptionsDB, "Хранение")

Rel(ProxyService, ContentService, "Обмен событиями")
Rel(ContentService, ContentDB, "Хранение")

Rel(ProxyService, PaymentService, "Обмен событиями")
Rel(PaymentService, PaymentDB, "Хранение")

Rel(ProxyService, AuthService, "Обмен событиями")
Rel(ProxyService, UserService, "Обмен событиями")
Rel(UserService, UsersDB, "Хранение")

Rel(RecommendationSystem, EventService, "Публикация событий")

@enduml

'Rel(BFFWeb, MoviesService, "REST / async (get metadata)")
'Rel(BFFMobile, MoviesService, "REST / async")
'Rel(BFFWeb, UserService, "REST (user profile)")
'
'Rel(BFFWeb, EventLib, "Publish events (user.actions, ui.metrics)")
'Rel(BFFMobile, EventLib, "Publish events")
'
'Rel(EventLib, Kafka, "Produce / Consume events")
'Rel(CDC, Kafka, "Publish DB changes from Monolith")
'Rel(CDC, MonolithDB, "Read DB change stream")
'
'Rel(Kafka, MoviesService, "Consume events (populate local read DB)")
'Rel(Kafka, SubscriptionService, "Consume events")
'Rel(Kafka, RecommendationSystem, "Publish/subscribe (optional)")
'
'Rel(Monolith, MonolithDB, "Reads/Writes")
'Rel(Monolith, CDC, "DB binlog -> Debezium")
'
'Rel(PaymentService, PaymentsDB, "Writes/reads")
'Rel(UserService, UsersDB, "Writes/reads")
'Rel(MoviesService, MoviesDB, "Writes/reads")
'Rel(SubscriptionService, SubscriptionsDB, "Writes/reads")
'
'RelAll(Observability, "Collect metrics/logs/traces from all containers")
'RelAll(ConfigVault, "Provide secrets/config to K8s workloads")
